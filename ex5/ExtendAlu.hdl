// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
 
     ShiftLeft(in=x,out=xL);
     ShiftRight(in=x,out=xR);
     ShiftLeft(in=y,out=yL);
     ShiftRight(in=y,out=yR);
     
     Mux16(a=xR,b=xL,sel=instruction[5],out=x1);
     Mux16(a=yR,b=yL,sel=instruction[5],out=y1);
     
     Mux16(a=y1,b=x1,sel=instruction[4],out=out1);


     ALU(x=x,y=y,zx=instruction[5],nx=instruction[4],zy=instruction[3]
     ,ny=instruction[2],f=instruction[1],no=instruction[0],out=out2,zr=zr2,ng=ng2);
     ALU(x=out1,y=false,zx=false,nx=false,zy=true,ny=true,f=false,no=false,out=out3,zr=zr1,ng=ng1);

     Mux16(a=out1,b=out2,sel=instruction[8],out=out);
     Mux(a=zr1,b=zr2,sel=instruction[8],out=zr);
     Mux(a=ng1,b=ng2,sel=instruction[8],out=ng);
 
     

}
