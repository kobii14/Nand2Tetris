// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        static Array screen,arr;
        static boolean color;

        /** Initializes the Screen. */
        function void init() {
        let screen = 16384;
        let arr=Array.new(15);
            let arr[0]=1;
            let arr[1]=2;
            let arr[2]=4;
            let arr[3]=8;
            let arr[4]=16;
            let arr[5]=32;
            let arr[6]=64;
            let arr[7]=128;
            let arr[8]=256;
            let arr[9]=512;
            let arr[10]=1024;
            let arr[11]=2048;
            let arr[12]=4096;
            let arr[13]=8192;
            let arr[14]=16384;
            let arr[15]=16384+16384;
        let color=true;
        return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {

        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let color = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int xx,yy,add,val,q,pat;
            let xx=#(#(#(#x)));
            let yy=^(^(^(^(^y))));
            let add = yy+xx;
            let q=x-(^(^(^(^xx))));
            let pat=arr[q];
            if (color){ //white color
            let screen[add] = screen[add] | pat;
            }
            else{ //black color
            let screen[add]=screen[add]& ~pat;
            }
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */

        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int z;
            //make x2>x1
            if (x1 > x2){
                let z = x1;
                let x1 = x2;
                let x2 = z;
                let z = y1;
                let y1 = y2;
                let y2 = z;
            }
            if((y2 - y1)=0){        //(x2 - x1)!=0 &(y2 - y1)=0
                do Screen.draw_horz_line(x1,x2,y1);
            }
            else{
                if ((x2 - x1)=0){       //(x2 - x1)=0
                    do Screen.draw_vertical_line(x1,y1,y2);
            }
            else{                   //(x2 - x1)!=0 &(y2 - y1)!=0
                do Screen.draw_diag_line(x1,y1,x2,y2,(x2 - x1),(y2 - y1));
            }
        }
        return;
        }


        function void draw_vertical_line(int x,int y1,int y2){
            var int i,dy,z;
            let i=0;
            //make y1<y2
            if (y1 > y2){
                let z = y1;
                let y1 = y2;
                let y2 = z;
            }
            let dy = y2-y1;

            while(i < dy){
                do Screen.drawPixel(x,y1);
                let y1 = y1+1;
                let i = i+1;
            }
            return;
        }

        function void draw_horz_line(int x1,int x2,int y){
            var int i,a1,a2,x1mod16,x2mod16,z;
            let i=0;
            if (x1>x2){
                let z=x1;
                let x1=x2;
                let x2=z;
            }
            let x1mod16=x1&15;
            let x2mod16=x2&15;
            let a1=(32*y)+(x1/16);
            let a2=(32*y)+(x2/16);
            if (x2mod16=0){
            let a2=a2-1;
            }

            // x1 and x2 in the same 16-bit
            if (a1=a2){
            do Screen.draw_mini_line(x1,x2,y);
            }
            else{
            if (x1mod16 > 0){
                let a1=a1+1;
                do Screen.draw_mini_line(x1,x1+16-x1mod16,y);
            }
            if (x2mod16 > 0){
                let a2=a2-1;
                do Screen.draw_mini_line(x2-x2mod16,x2,y);
            }
            while(~(a1 > a2)){
                let screen[a1]=color;
                let a1=a1+1;
            }
            }
            return;
        }


        function void draw_mini_line(int x1,int x2,int y){
            while(~(x1 > x2)){ //x1<=x2
                do Screen.drawPixel(x1, y);
                let x1 = x1 + 1;
            }
            return;
        }
        //dx>0
        function void draw_diag_line(int x1,int y1,int x2,int y2,int dx,int dy){

         // Pseudocode:
        // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
        // 2. Compute dx and dy
        // 3. while ((a <= dx) and (b <= dy))
        // 4.   do drawPixel(x+a, y+b)
        // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
        // 6.   else          { let b=b+1, diff=diff-dx }
        var int a, b, diff, sign;
        let a = 0;
        let sign = 1;
        let b = 0;
        let diff = 0;
        if (dy < 0){
            let sign = -1;
        }
        while(~(a > dx) & (((sign = 1) & ~(b > dy)) | ((sign = -1) & ~(b < dy)))){
            do Screen.drawPixel(a + x1, b + y1);
            if ((diff > 0) | (diff = 0)){
                let diff = diff - dx;
                let b = sign + b;
            }
            else{
                let diff = diff + (sign * dy);
                let a = a + 1;
            }
        }
        return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {

            var int z;
            let z = y1;

            while((z < y2) | (z = y2)){
            do Screen.draw_horz_line(x1, x2, z);
                let z = 1 + z;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {

            var int dx, dy, r_sqrt;
            let r_sqrt = r * r;
            let dy = -r;
            while((dy < r) | (dy = r)){
                let dx = Math.sqrt((-1 * (dy * dy)) + r_sqrt);
                do Screen.draw_horz_line(-dx + x, dx + x, dy + y);
                let dy = 1 + dy;
            }
            return;
        }
}
