// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field int max,len;
    field Array arr;

    constructor String new(int maxLength) {
        var Array str;
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let arr = Array.new(maxLength);
        let len=0;
        let max=maxLength;
        return this;
    }


    /** Disposes this string. */
    method void dispose() {
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[len]=c;
        let len=len+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
    let len=len-1;
    return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {

        var int val,i,d;
        var boolean pos;
        let val=0;
        let i=0;

        if (arr[0]=45){ // ='-'
            let pos=false;
            let i=1;
        }
        else{
            let pos=true;
            let i=0;
        }
        while(i<len){
            let d = arr[i];
            if ((d>47) & (d<58)){
                let d=d-48;
                let val=(val*10) + d;
            }
            else{
                let i=len;
            }
            let i=i+1;
        }
        if (~(pos)){
            return -val;
        }
        else{
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len= 0;
        if (val <0){
            let val= (-1) *val;
            do appendChar(45);
        }
        do int2string(val);
        return;
    }

    function char int_to_char(int i) {
        return i + 48;
    }

    method void int2string(int val){
        var int lastDigit,div,x;
        var char c;
        let div = val / 10;
        let x= div * 10;
        let lastDigit = val-x;
        let c= String.int_to_char(lastDigit);

        if (val <10){
            do appendChar(c);
        }
        else{
            do setInt(div);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;

    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
